user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	##
	# SSL Settings
	##

  # TODO: Replace with {{inventory_hostname}} instead
  ssl_certificate     /etc/letsencrypt/live/{{hostname}}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{hostname}}/privkey.pem;

  ssl_session_timeout 1d;
  ssl_session_cache   shared:SSL:50m;
  ssl_session_tickets off;

  ssl_dhparam /etc/nginx/ssl/dhparam.pem;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

  ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
  ssl_prefer_server_ciphers on;

  # add_header Strict-Transport-Security "max-age=300; includeSubDomains";
  add_header X-Frame-Options DENY;
  add_header X-Content-Type-Options nosniff;

  ssl_stapling            on;
  ssl_stapling_verify     on;
  ssl_trusted_certificate /etc/letsencrypt/live/{{hostname}}/chain.pem;

	##
	# Gzip Settings
	##

	gzip on;
	gzip_disable "msie6";

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##

  # Enforce HTTPS:
  # server {
  #   listen 80;
  #   listen [::]:80;
  #   return 301 https://$host$request_uri;
  # }

  server {
    listen 80;
    listen [::]:80;
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name ~^(www)\.{{hostname}}$;
    return 301 $scheme://{{hostname}}$request_uri;
  }

  upstream socket {
    server localhost:3000;
  }

  server {
    listen 80;
    listen [::]:80;
    listen 443 ssl;
    listen [::]:443 ipv6only=on ssl;
    server_name {{hostname}};

    if ($host !~* ^{{hostname}}$ ) {
      return 444;
    }

    # Certbot / Let's encrypt specific
    location ^~ /.well-known/acme-challenge/ {
      alias   /usr/share/nginx/html/certbot/.well-known/acme-challenge/;
    }

    # Serving app locations
    location /static/ {
      alias   {{project_dir}}naxos/static/;
    }

    location /media/ {
      alias   {{project_dir}}naxos/media/;
    }

    location / {
      proxy_http_version  1.1;
      proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header    Host $http_host;
      proxy_set_header    X-NginX-Proxy true;
      proxy_set_header    X-Forwarded-Proto $scheme;
      proxy_redirect      off;
      proxy_pass          http://127.0.0.1:8000/;  # gunicorn server
    }

    location /socket.io {
      proxy_http_version  1.1;
      proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header	  Host $http_host;
      proxy_set_header	  Upgrade $http_upgrade;
      proxy_set_header	  Connection "upgrade";
      proxy_redirect		  off;
      proxy_pass		      http://socket;
    }
  }
}
